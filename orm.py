from orm_models import User


# В то время как в предыдущем примере мы выдали INSERT с использованием словарей Python для указания данных,
# которые мы хотели добавить, с помощью ORM мы напрямую используем пользовательские классы Python, которые мы
# определили, еще в разделе Использование декларативных форм ORM для определения метаданных таблиц .
# На уровне классов классы User и Address служили местом для определения того, как должны выглядеть соответствующие
# таблицы базы данных. Эти классы также служат расширяемыми объектами данных, которые мы используем для создания и
# управления строками в транзакции. Ниже мы создадим два User объекта, каждый из которых представляет потенциальную
# строку базы данных для INSERT:

squidward = User(name="squidward", fullname="Squidward Tentacles")
krabs = User(name="ehkrabs", fullname="Eugene H. Krabs")

# Мы можем создать эти объекты, используя имена сопоставленных столбцов в качестве ключевых аргументов в конструкторе.
# Это возможно, поскольку User класс включает автоматически сгенерированный __init__() конструктор, предоставленный
# отображением ORM, чтобы мы могли создать каждый объект, используя имена столбцов в качестве ключей в конструкторе.

# Аналогично нашим примерам Core Insert мы не включили первичный ключ (т. е. запись для id столбца), поскольку мы
# хотели бы использовать функцию автоинкрементного первичного ключа базы данных, в данном случае SQLite,
# с которой ORM также интегрируется. Значение атрибута id для указанных выше объектов, если бы мы его просмотрели,
# отобразилось бы как None:

print(squidward)

# Значение None предоставляется SQLAlchemy, чтобы указать, что атрибут пока не имеет значения. Атрибуты, сопоставленные
# SQLAlchemy, всегда возвращают значение в Python и не вызываются AttributeError если они отсутствуют,
# при работе с новым объектом, которому не присвоено значение.

# На данный момент два наших объекта, представленных выше, находятся в состоянии, называемом переходным — они не
# связаны ни с одним состоянием базы данных и еще не связаны с Sessionо бъектом, который может генерировать
# для них операторы INSERT.

