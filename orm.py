from database import get_db_session
from orm_models import User

squidward = User(name="squidward", fullname="Squidward Tentacles")
krabs = User(name="ehkrabs", fullname="Eugene H. Krabs")
session = get_db_session()
session.add(squidward)
session.add(krabs)
print(session.new)
print("-" * 60)

# Flush использует Session шаблон, известный как `Unit of Work`. Это обычно означает, что он накапливает изменения
# по одному за раз, но фактически не передает их в базу данных, пока они не понадобятся. Это позволяет ему принимать
# более обоснованные решения о том, как SQL DML должен быть выпущен в транзакции на основе заданного набора ожидающих
# изменений. Когда он выпускает SQL в базу данных, чтобы вытолкнуть текущий набор изменений, этот процесс называется
# сбросом.

# Мы можем проиллюстрировать процесс сброса вручную, вызвав Session.flush() метод:

session.flush()

# Выше мы видим, что Session сначала был вызван для испускания SQL, поэтому он создал новую транзакцию и испустил
# соответствующие операторы INSERT для двух объектов. Транзакция теперь остается открытой, пока мы не вызовем любой
# из методов Session.commit(), Session.rollback(), или Session.close().Session

# Хотя Session.flush() может использоваться для ручного сброса ожидающих изменений в текущую транзакцию,
# обычно это не нужно, так как Session есть поведение, известное как autoflush , которое мы проиллюстрируем позже.
# Он также сбрасывает изменения всякий раз, когда Session.commit() вызывается.
